#!/bin/sh
# http://stackoverflow.com/questions/64786/error-handling-in-bash
if [ -n "$BASH" ]; then
	set -o pipefail  # trace ERR through pipes
fi
# set -o errtrace  # trace ERR through 'time command' and other functions
set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
set -o errexit   ## set -e : exit the script if any statement returns a non-true return value
. ./colors.sh
dirp0=$(readlink -f "$(dirname $0)")
stepp() {
	set +e; steppres="$(grep ${1} tests/steps| tr -d '\n')"; set -e
	# echo "steppres='${steppres}'aa"
	return 0
}

spaces=""
setSpaces() {
	spaces=""
	if [ ${ii} -gt 0 ]; then spaces="  "; fi
}

title() {
	m="${1}"
	nl=""
	if [ "${m#_}" != "${m}" ]; then m="${m#_}"; nl="1"; fi
	# echo "nl='${nl}', m='${m}'"
	n="${i}"
	if [ ${ii} -gt 0 ]; then n="${n}.${ii}"; fi
	p="${spaces}${env}.${n}: "
	if [ ${ii} -eq 0 ]; then m="${p}${White}${On_Cyan}${m}${Color_Off}"; fi
	if [ ${ii} -ne 0 ]; then m="${p}${m}"; fi
	if [ "${nl}" != "" ]; then printf "${m} "; else printf "${m}\n"; fi
}


cmd() {
	m="tests/${envfull}/${1}"
	. "${m}"
	c="run"
	m="${spaces}${m}"
	printf "${Cyan}${m}${Color_Off}\n"
	set +e
	o=$(${c} 2> ${dirp0}/tests/err 1> ${dirp0}/tests/out) ; r=$?
	cd ${dirp0}
	if [ "$(ls -l tests/out 2> /dev/null | awk '{print $5}')" != "0" ]; then
		while read line; do    
			printf "${Green}${line}${Color_Off}\n"
		done < tests/out
	fi
	if [ "$(ls -l tests/err 2> /dev/null | awk '{print $5}')" != "0" ]; then
		if [ $r -eq 0 ]; then p="${Color_Off}    "; else p="${Red}    "; fi
		while read line; do    
			printf "${p}${line}${Color_Off}\n"
		done < tests/err
	fi
	# cmd /C "set force_res=1 && t"
	set -e
	return $r
}

stepcmd() {
	atitle="${1}"
	acode="${2}"
	acmd="${3}"

	ii=$((ii+1)); setSpaces
	title "${atitle}"
	stepp "${acode}"
	# echo "steppres='${steppres#${acode}}'aa"
	if [ "${steppres}" != "${acode}" ] || [ "${reset}" -eq 0 ]; then
		echo ""
		cmd "${acmd}"
		printf "${spaces}${Green}[done]${Color_Off}\n";
		if [ "${steppres}" = "" ] && [ "${recordstep}" -eq 0 ]; then echo "${acode}">> tests/steps; fi
	else printf "${Green}(already done)${Color_Off}\n"; fi
}

git config http.https://localhost:6443/.sslCAInfo ${dirp0}/apache/crts
git config credential.helper passwd
git --version
export LOG_LEVEL=3
steppres=""
touch tests/steps
i=1
ii=0
env="NR"
envfull="nr"
recordstep=0
printf "${Black}${On_White}Git Server tests${Color_Off}\n"
printf "${Black}${On_White}=================${Color_Off}\n"
echo ""
printf "${Black}${On_Yellow}NR: New Repos tests${Color_Off}\n"
if [ ! -e "tests/newrepos" ]; then mkdir -p tests/newrepos; fi
printf "${Black}${On_Yellow}    ---------------${Color_Off}\n"
title "gitolite-admin repo"
reset=1
stepcmd "_clone blessed gitolite-admin in tests/newrepos/gitolite-admin" \
		"B_gitolite-admin_cloned" \
		"clone_gitolite-admin_as_gitoliteadm"
stepcmd "_check ls-remote in tests/newrepos/gitolite-admin" \
		"B_gitolite-admin_ls-remote" \
		"check_ls-remote_in_gitolite-admin"
stepcmd "_(master) Add projextrdr to all repo" \
		"B_gitolite-admin_master_add_projextrdr" \
		"master_add_projextrdr_to_all_repos"
ii=0; i=$((i+1)); setSpaces
title "Add new repo (not replicated)"
stepcmd "_(master) Add new repo module2" \
		"B_gitolite-admin_master_add_new_repo_module2" \
		"master_add_new_repo_module2"
stepcmd "_(master) Clone new repo module2 as projadm2" \
		"B_gitolite-admin_master_clone_new_repo_module2_as_projadm2" \
		"master_clone_new_repo_module2_as_projadm2"

ii=0; i=$((i+1)); setSpaces
title "Add new repo (replicated to external)"
stepcmd "_(master_ext) Add projextrdr to all repos" \
		"B_gitolite-admin_master_ext_add_projextrdr" \
		"master_ext_add_projextrdr_to_all_repos"
stepcmd "_(master_ext) Declare module2 gitolite-admin" \
		"B_gitolite-admin_master_ext_declare_module2" \
		"master_ext_declare_module2_to_gitolite-admin"
stepcmd "_(master_ext) Clone new repo module2 as projextadm2" \
		"B_gitolite-admin_master_clone_new_repo_module2_as_projextadm2" \
		"master_ext_clone_new_repo_module2_as_projextadm2"

env="NU"
envfull="nu"
ii=0; i=1; setSpaces
echo ""
printf "${Black}${On_Yellow}NU: New Users tests${Color_Off}\n"
printf "${Black}${On_Yellow}    ---------------${Color_Off}\n"
if [ ! -e "tests/newusers" ]; then mkdir -p tests/newusers; fi

title "Declare new user on blessed"
stepcmd "_(master) Clone gitolite-admin as projadm2" \
		"NU_clone_gitolite-admin_as_projadm" \
		"clone_gitolite-admin_as_projadm"
stepcmd "_(master) Add projusr2 to project2 as projadm2" \
		"NU_master_add_projusr2_to_project2_as_projadm2" \
		"master_add_projusr2_to_project2_as_projadm2"
stepcmd "_Clone module2 as projusr2" \
		"NU_clone_module2_as_projusr2" \
		"clone_module2_as_projusr2"

ii=0; i=$((i+1)); setSpaces
title "Declare new user on external"
stepcmd "_(master_ext) Clone gitolite-admin as projextrdr" \
		"NU_master_ext_clone_gitolite-admin_as_projextrdr" \
		"master_ext_clone_gitolite-admin_as_projextrdr"
stepcmd "_(master_ext) Add projextusr2 to projectext2 as projextrdr for projextadm2" \
		"NU_master_ext_add_projextusr2_to_projectext2_as_projextrdr" \
		"master_ext_add_projextusr2_to_projectext2_as_projextrdr"
stepcmd "_Clone module2 as projextusr2" \
		"NU_clone_module2_as_projextusr2" \
		"clone_module2_as_projextusr2"

env="NC"
envfull="nc"
ii=0; i=1; setSpaces
echo ""
printf "${Black}${On_Yellow}NC: New Commits tests${Color_Off}\n"
printf "${Black}${On_Yellow}    -----------------${Color_Off}\n"
if [ ! -e "tests/newcommits" ]; then mkdir -p tests/newcommits; fi

title "Replication from blessed to external"
recordstep=1
reset=0
stepcmd "_Initialize module2 master and master_ext as projusr2" \
		"NC_initialize_module2_master_and_master_ext_as_projusr2" \
		"initialize_module2_master_and_master_ext_as_projusr2"
# add_commit_to_master_and_push_as_projusr2
# clone_module2_as_projextusr2_check_master_int

title "Replication from external to blessed"
# add commit to master and push as projextusr2
# clone_module2_as_projusr2_check_master_ext

printf "${Green}[v] all done${Color_Off}\n"
