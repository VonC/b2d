#!/bin/bash

H=/home/git

source "${H}/sbin/usrcmd/get_tpl_value"

# A local branch must be registered
get_tpl_value "${H}/.envs.private" "@LOCAL_BRANCH@" branch_local
if [[ "${branch_local}" == "" ]] ; then
  echo "No local branch registered, nothing to push to upstream"
  exit 0
fi

branch=$(git rev-parse --symbolic --abbrev-ref $1)
echo "Post Update for branch '${branch}'"

if [[ "${branch}" != "${branch_local}" ]] ; then
  echo "Update on different branch than '${branch_local}', nothing to push to upstream."
  exit 0
fi

echo "Update on local '${branch_local}, checking on external branch presence"

# if there is an external branch or a downstream site, then it is a repo public
get_tpl_value "${H}/.envs.private" "@DOWNSTREAM_NAME@" downstream_name
get_tpl_value "${H}/.envs.private" "@EXT_BRANCH_NAME@" branch_ext
if [[ "${downstream_name}" == "" && "${branch_ext}" == "" ]] ; then
  echo "No external branch registered, nothing to push to upstream"
  exit 0
fi

a_branch_ext=$(git branch|grep "${branch_ext}")
if [[ "${downstream_name}" == "" && "${a_branch_ext}" == "" ]] ; then
  echo "No external branch '${branch_ext}' or downstream repo detected in the local repo, must be an internal repo only."
  exit 0
fi

# An upstream branch must be registered
get_tpl_value "${H}/.envs.private" "@UPSTREAM_BRANCH@" branch_upstream
if [[ "${branch_upstream}" == "" ]] ; then
  echo "No upstream branch registered, nothing to push to upstream"
  exit 0
fi

# An upstream name must be registered
get_tpl_value "${H}/.envs.private" "@UPSTREAM_NAME@" upstream_name
if [[ "${upstream_name}" == "" ]] ; then
  echo "No upstream name registered, nothing to push to upstream"
  exit 0
fi

# An upstream url must be registered
get_tpl_value "${H}/.envs.private" "@UPSTREAM_URL_HGIT@" upstream_url
if [[ "${upstream_url}" == "" ]] ; then
  echo "No upstream url registered, nothing to push to upstream"
  exit 0
fi

reponame=$(basename "$PWD")

# A login must be defined for that public repo
get_tpl_value "${H}/.envs.private" "@USER_PUSH@" user_push
if [[ "${user_push}" == "" ]] ; then
  echo "No user is registered to push to upstream url '${upstream_url}'"
  exit 0
fi

upstream_url="${upstream_url#https://}"
upstream_url="${upstream_url#*@}"
upstream_url="https://${user_push}@${upstream_url}"

r=$(xxgit=1 git remote show -n ${upstream_name}|grep "https"|tail -1)

if [[ "${r}" == "" ]] ; then
  echo "register '${upstream_url}${reponame}' as '${upstream_name}'"
  git remote add ${upstream_name} ${upstream_url}${reponame}
  r=$(xxgit=1 git remote show -n ${upstream_name}|grep "https"|tail -1)
else
  r="https${r#*https}"
fi

if [[ "${r}" != "" && "${r#${upstream_url}}" == "${r}" ]] ; then
  r="${upstream_url}${reponame}"
  echo "update '${upstream_url}${reponame}' as '${upstream_name}'"
  git remote set-url ${upstream_name} ${upstream_url}${reponame}
fi

ggit="git --git-dir=${H}/repositories/${reponame}"

if [[ -e "${H}/.gnupg/users.netrc.asc" ]]; then
  chelper=$(${ggit} config --local --get credential.helper)
  if [[ "${chelper}" == "" || "${chelper#netrc -}" == "${chelper}" ]] ; then
    $(${ggit} config --local credential.helper 'netrc -f ${H}/.gnupg/users.netrc.asc')
  fi
fi

#echo $r
pr=${r%//*}
r=${r#*//}
user=${r%@*}
r=${r#*@}
u=${r#*/}
r=${r%%/*}
echo "host='$r', username='$user'"
echo "${H}/.gnupg/git-credential-netrc -f ${H}/.gnupg/users.netrc.asc get host=$r username=$user"
# pidof gpg-agent
# ps -p 7442 -o etimes=
# ps -p $(pidof gpg-agent 2>/dev/null) -o etimes= 2>/dev/null
p=$(${H}/.gnupg/git-credential-netrc -f ${H}/.gnupg/users.netrc.asc get << EOF
host=$r
username=$user
EOF | grep "password")
echo "password p='${p}'"
if [[ "${p}" == "${p#*password=}" ]] ; then
  echo "No password found for pushing to '${upstream_url}'"
  exit 0
fi
p="${p#*password=}"
p="${p%%?protocol=*}"
#echo $user $r "password='"$p"'"
#echo "pr // user:p@r/u: ${pr}//${user}:${p}@${r}/${u}"

echo "Pushing public repo '${branch_local}' branch to '${upstream_name}'/'${branch_upstream}'"
git config --global --remove-section credential

cp "${H}/.envs.private" "${H}/.netrc"
git config color.ui false
res="$(git push --follow-tags -f "${pr}//${user}:${p}@${r}/${u}" ${branch_local}:${branch_upstream} 2>&1)"
# http://stackoverflow.com/questions/525592/find-and-replace-inside-a-text-file-from-a-bash-command
# res=${res//:[^@ ]*?@/:xxx@}
# http://stackoverflow.com/questions/8713158/place-a-multi-line-output-inside-a-variable
res="$(echo "${res}" | perl -p -ne 's/(:\/\/[^:]+?):[^@ ]*?@/\1:yyy@/g')"
if [[ "${downstream_name}" == "" ]]; then
  flog="push.log"
  if [[ "${GL_USER}" != "" ]]; then
    flog="push.${GL_USER}.log"
  fi
  nowd=`date +"%Y%m%d - %H:%M:%S"`
  echo "~~~~~~~~~~~~~~~~~~~" >> "${H}/git/logs/${flog}"
  echo "$nowd (${GL_USER})" >> "${H}/git/logs/${flog}"
  echo "${res}" >> "${H}/git/logs/${flog}"
else
  echo "${res}"
fi
rm -f "${H}/.netrc"
git config --global credential.helper netrc
git config color.ui true
