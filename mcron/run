#! /bin/sh
folder="$( cd "$( dirname "$(readlink -f "$0")" )" && pwd )"
cd ${folder}
. ${folder}/../scripts/.bash_aliases

image="kv:5000/b2d/mcron:1.0.8"

if [ "${1}" != "bash" ] && [ "${1}" != "" ]; then
	cd $HOME/b2d/gitolite
	./run $1
fi

if [ "${1}" = "bash" ]; then
	cd $HOME/b2d/gitolite
	./run
	cd $HOME/b2d/mcron
	docker volume create --name mcron.shippingbay.bash.cont
	docker inspect mcron.bash.cont > /dev/null 2>&1 && docker rm mcron.bash.cont
	docker create -it --name mcron.bash.cont -v mcron.shippingbay.bash.cont:/home/git/shippingbay_git -v gitolite.repos.cont:/home/git/repositories ${image} bash
	docker cp "$HOME/b2d/envs/.envs.example.private" mcron.bash.cont:/home/git/.envs.private
	docker cp "$HOME/b2d/mcron/clean_shipping_bay.guile" mcron.bash.cont:/home/git/.config/cron/
	docker cp "$HOME/b2d/mcron/pull_external.guile" mcron.bash.cont:/home/git/.config/cron/
	docker start -a -i mcron.bash.cont
	docker inspect mcron.bash.cont > /dev/null 2>&1 && docker rm mcron.bash.cont
	docker volume rm mcron.shippingbay.bash.cont
	cd $HOME/b2d/gitolite
	k all
	exit 0
fi

cd $HOME/b2d/mcron
mcron_cont="mcron.cont"
mcron_shippingbay_cont="mcron.shippingbay.cont"
mshippingbay="mshippingbay"
envs_private=".envs.example.private"

env="none"
if [ "${1}" != "" ]; then
	mcron_cont="mcron.${1}.cont"
	mcron_shippingbay_cont="mcron.shippingbay.${1}.cont"
	mshippingbay="mshippingbay.${1}"
	envs_private=".envs.${1}.private"
	env=$1
fi
if [ "${1}" != "external" ]; then
	mcron_shippingbay_cont=""
	mshippingbay=""
fi
if [ "${1}" = "" ]; then
	mshippingbay="mshippingbay"
	mcron_shippingbay_cont="mcron.shippingbay.cont"
fi

if [ "${mshippingbay}" != "" ]; then
	docker volume create --name ${mcron_shippingbay_cont} --label env=${env}
fi

docker inspect ${mcron_cont} > /dev/null 2>&1 && if [ "$(din -f '{{.State.ExitCode}}' ${mcron_cont})" != "0" ]; then
	d rm ${mcron_cont}
fi
docker inspect ${mcron_cont} > /dev/null 2>&1 && exit 0

if [ "${1}" = "external" ]; then
	docker create -it --name ${mcron_cont} --volumes-from ${mcron_shippingbay_cont} mcron
	docker cp "$HOME/b2d/envs/${envs_private}" ${mcron_cont}:/home/git/.envs.private
	docker cp "$HOME/b2d/mcron/clean_shipping_bay.guile" ${mcron_cont}:/home/git/.config/cron/
	docker start ${mcron_cont}
elif [ "${1}" = "staging" ]; then
	docker inspect gitolite.repos.${1}.cont > /dev/null 2>&1 || { echo "${mcron_cont}/run: gitolite.repos.${1}.cont not started"; exit 1; }
	docker inspect sshd.external.cont > /dev/null 2>&1 || { echo "${mcron_cont}/run: sshd_cont 'sshd.external.cont' not started"; exit 1; }
	if [ ! -e ../sshd/root ] || [ ! -e ../sshd/root.pub ]; then
		echo "sshd.external.cont has not copied root(.pub) keys"
	fi
	docker inspect apache.external.cont > /dev/null 2>&1 || { echo "${mcron_cont}/run: apache.upstream.cont: 'apache.external.cont' not started"; exit 1; }
	docker inspect apache.blessed.cont > /dev/null 2>&1 || { echo "${mcron_cont}/run: apache.downstream.cont: 'apache.blessed.cont' not started"; exit 1; }
	docker create -it --name ${mcron_cont} --volumes-from gitolite.repos.${1}.cont --link sshd.external.cont:mcron.sshd.cont --link apache.external.cont:apache.upstream.cont --link apache.blessed.cont:apache.downstream.cont mcron
	docker cp "$HOME/b2d/envs/${envs_private}" ${mcron_cont}:/home/git/.envs.private
	docker cp "$HOME/b2d/mcron/pull_external.guile" ${mcron_cont}:/home/git/.config/cron/
	docker cp "$HOME/b2d/sshd/root" ${mcron_cont}:/home/git/.ssh/root
	docker cp "$HOME/b2d/sshd/root.pub" ${mcron_cont}:/home/git/.ssh/root.pub
	docker cp "$HOME/b2d/mcron/pull_external.guile" ${mcron_cont}:/home/git/.config/cron/
	docker cp "$HOME/b2d/apache/crts" ${mcron_cont}:/home/git/.ssh/
	docker start ${mcron_cont}
	docker exec -u root -i ${mcron_cont} update_known_hosts
else
	# does nothing though (for now; later, might schedule log management, or repo backups)
	docker create -it --name ${mcron_cont} mcron
	docker start ${mcron_cont}
fi
