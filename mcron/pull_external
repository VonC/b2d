#!/bin/bash
# Script used on staging in order to 
# pull the changes from external
# This script uses SSH to analyze the content of an "outgoing" folder on the external server
# It then fetches the changes from the external server and pushes the changes to the blessed server
# The name of the branch can contain a "/"
H="/home/git"
source "${H}/sbin/usrcmd/get_tpl_value"


get_tpl_value "${H}/.envs.private" "@DOWNSTREAM_URL_HGIT@" downstream_url
# Envs required for in order to read in shipping bay in upstream serverv
#get_tpl_value "${H}/.envs.private" "@UPSTREAM_SHIPPINGBAY@" upstream_shippingbay
upstream_shippingbay="/home/git/shippingbay_git"
upstream_outgoing=${upstream_shippingbay}/outgoing
upstream_incoming=${upstream_shippingbay}/incoming

echo "pull_external"
if [ "${downstream_url}" = "" ]; then
  #echo "no downstream_url."
  exit 0
fi

if [ -e "${H}/mcron/.ignorepull" ] && [ "$#" -eq 0 ]; then
  exit 0
fi

get_tpl_value "${H}/.envs.private" "@UPSTREAM_URL_HGIT@" upstream_url

if [ "${upstream_url}" = "" ]; then
  #echo "no upstream_url."
  exit 0
fi

git config --global --unset credential.helper
git config --unset credential.helper
logfn=log_"$(date +%Y%m%d -d "today")"
logf="${H}/mcron/logs/${logfn}"
current_time=`date +%H%M%S`
mkdir -p "${H}/mcron/logs"
ln -fs "logs/${logfn}" "${H}/mcron/log"
touch ${logf}
echo "---- ${current_time} : checking shipping_bay" >> ${logf}
#echo "Check if anything new comes from upstream '${downstream_url}', before pushing it back to downstream"
#repos=$(git --git-dir=${H}/repositories/gitolite-admin.git show master:conf/gitolite.conf | grep "repo " | grep -v "testing" | grep -v "gitolite-admin")
list_remotefiles=$(ssh sshd_root "ls ${upstream_outgoing}")
for aremotefile in ${list_remotefiles}
do
   # replace the hash "#" by a slash "/"
   # this is to deal with the fact that repo name may contain a slash
   # therefore, if a push is done on a repo with slash in its name
   # the file created has a name with the slash replaced by a hash
   # The variable arepo is therefore the real name of the repo with potentially a slash
   # A remotefile has the following format 
   #   [foldername#]<reponame>.git#<branch>.br#<SHA1>
   #    <reponame>.git#<branch>.br#<SHA1>

   arepo=`echo ${aremotefile} | awk -F\.git# '{print $1}' | sed "s/#/\//"`
   branch_imported=`echo ${aremotefile} | awk -F\.git# '{print $2}'| awk -F\.br# '{print $1}' | sed "s/#/\//" ` 
   echo arepo ${arepo}
   echo branch ${branch_imported}
   ggit="git --git-dir=${H}/repositories/${arepo}.git"
   $(${ggit} config --unset credential.helper)
   exturl=$(${ggit} config --local --get remote.external.url)
   if [ "${exturl#*@}" != "${exturl}" ]; then
      exturl="https://projextrdr:projextrdr@${exturl#*@}"
   else
      exturl="https://projextrdr:projextrdr@${exturl#*//}"
   fi
   if [ "${exturl}" = "https://projextrdr:projextrdr@" ]; then
      exturl="https://projextrdr:projextrdr@${upstream_url#*//}${arepo}.git"
      # echo "set exturl for external: '${exturl}'"
      ${ggit} remote add external ${exturl}
   fi

    aref=""
  #  if [ -e "${H}/repositories/${arepo}.git/refs/heads/master_ext" ]; then
  #    aref=$(cat "${H}/repositories/${arepo}.git/refs/heads/master_ext")
  #  fi


    if [ ${exturl#*/hgit/}" != "${exturl} ]; then
      r="${exturl#*/hgit/}"
      exturl="${exturl%/hgit/*}/hgit/${r}"
    fi
    nowd=`date +%Y%m%d%H%M%S`
    if [ ${branch_imported} != master ]
    # that means that a file with a branch other than master 
    # was created. That means the repo is a sync_mode Partial or full
    # we do not need to worry about branch sync_mode 
    # because post_update is designed not to create any file in shipping bay
    # if a change is pushed to sync_mode on external
    then
       branch_converted=${branch_imported}_external
    else    
       branch_converted=${branch_imported}_ext
    fi
    if [ -e "${H}/repositories/${arepo}.git/refs/heads/${branch_converted}" ]; then
       aref=$(cat "${H}/repositories/${arepo}.git/refs/heads/${branch_converted}") 
    fi
    fetch="${nowd} ${ggit} fetch --force ${exturl} ${branch_imported}:${branch_converted}"     
    fetchres=""
    if [ -e "${H}/mcron/.ignorepull" ]; then
      fetchres="${fetch}"
      echo ${fetch}
    else
      fetchres=$(${ggit} fetch --force ${exturl} ${branch_imported}:${branch_converted} 2>&1)
      if [ $? = 0 ] 
      then
         echo "Creating file ${upstream_incoming}/${aremotefile}" 
         createres=$(ssh sshd_root "touch ${upstream_incoming}/${aremotefile} ")
      else
         echo "Error in fetching from  ${exturl}"
      fi
    fi
    if [ "${fetchres}" != "" ]; then
      echo "${fetch}" >> ${logf}
      if [ "${fetch}" != "${fetchres}" ]; then
        echo "${fetchres}" >> ${logf}
      fi
    fi
    aref2=""
    if [ -e "${H}/repositories/${arepo}.git/refs/heads/${branch_converted}" ]; then
       aref2=$(cat "${H}/repositories/${arepo}.git/refs/heads/${branch_converted}")
    fi
   # if [ -e "${H}/repositories/${arepo}.git/refs/heads/master_ext" ]; then
   #   aref2=$(cat "${H}/repositories/${arepo}.git/refs/heads/master_ext")
   # fi
    # aref2=$(cat "${H}/repositories/${arepo}.git/refs/heads/master_ext")
    fh=$(cat "${H}/repositories/${arepo}.git/FETCH_HEAD" 2> /dev/null)
     echo "FETCH_HEAD='${fh}', refs/heads/master_ext='${aref}' => '${aref2}"
    if [ "${aref}" != "${aref2}" ] && [ "${fh#${aref2}}" != "${fh}" ]; then
      dwnurl="${downstream_url}${arepo}.git"
      if [ "${dwnurl#*@}" != "${dwnurl}" ]; then
        dwnurl="https://projextrdr:projextrdr@${dwnurl#*@}"
      else
        dwnurl="https://projextrdr:projextrdr@${dwnurl#*//}"
      fi

      if [ ${dwnurl#*/hgit/}" != "${dwnurl} ]; then
        r="${dwnurl#*/hgit/}"
        dwnurl="${dwnurl%/hgit/*}/hgit/${r}"
      fi

      nowd=`date +%Y%m%d%H%M%S`
      push="${nowd} ${ggit} push --force ${dwnurl} ${branch_converted}:${branch_converted}"
      pushres=""
      if [ -e "${H}/mcron/.ignorepull" ]; then
        pushres="${push}"
        echo "${push}"
      else
        pushres=$(${ggit} push --follow-tags --force ${dwnurl} ${branch_converted}:${branch_converted} 2>&1)
      fi
      if [ "${pushres}" != "" ]; then
        echo "${push}" >> ${logf}
        if [ "${push}" != "${pushres}" ]; then
          echo "${pushres}" >> ${logf}
        fi
      fi
    fi
done
